extern abs :: Int -> Int

MyInt = MyInt Int

Void = Void

MyEnum = MyEnumA | MyEnumB | MyEnumC

MySum = MySumA Int | MySumB Double

EmptyType

main :: Int
main =
  let
    x :: Int
    x =
      if True
        then abs (f 100)
        else abs (f 200)
    y :: Int
    y = x
    b =
      case (iAdd# x 2) of
        1 -> g
        o -> MyInt (iSub# o 3)
    b' =
      case b of
        MyInt b'' -> b''
    v = Void
    u =
      case v of
        Void -> b'
    s = myEnum
    t =
      case s of
        MyEnumA -> 1
        MyEnumB -> 2
        MyEnumC -> 3
  in
    let z = iAdd# u y; a = iAdd# t z in a

# f :: Int -> Int
f x = if True then abs x else threeHundred

g :: MyInt
g = MyInt 1

myEnum :: MyEnum
myEnum = MyEnumB

mySum :: MySum
mySum = MySumB 1.1

threeHundred :: Int
threeHundred = 100
